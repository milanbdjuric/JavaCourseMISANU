CREATE DATABASE Taksi

CREATE TABLE Tarife( 
    tarifaID INT PRIMARY KEY AUTO_INCREMENT, 
    naziv VARCHAR(45), 
    opis VARCHAR(100), 
    cena INT
) ENGINE = INNODB


CREATE TABLE `vozacka_dozvola` ( 
    `vozacka_dozvola_id` INT NOT NULL, 
    `broj_dozvole` VARCHAR(20) NULL, 
    `datum_izdavanja` DATE NOT NULL, 
    `dozvola_vazi_do` DATE NOT NULL, 
    PRIMARY KEY (`vozacka_dozvola_id`) 
) ENGINE = InnoDB;

CREATE TABLE kategorije ( 
    kategorijeID INT PRIMARY KEY,
    oznaka ENUM ('A','B','C'),
    opis varchar (40), 
    datumSticanja DATE 
)     ENGINE = INNODB;


CREATE TABLE kategorijeVozacke( 
    kategorijaVozackaID INT PRIMARY KEY AUTO_INCREMENT, 
    datumSticanja DATE, 
    kategorijeID INT, 
    vozacka_dozvola_id INT, 
    foreign key(kategorijeID) references kategorije(kategorijeID) 
    ON UPDATE CASCADE ON DELETE NO ACTION, 
    foreign key(vozacka_dozvola_id) references vozacka_dozvola(vozacka_dozvola_id) 
    ON UPDATE CASCADE ON DELETE NO ACTION 
)ENGINE = INNODB;

CREATE TABLE taksisti( 
    taksistaID INT PRIMARY KEY NOT NULL, 
    ime varchar(45), 
    prezime varchar(45),
    telefon varchar(45),
    email varchar(45), 
    tekuciRacun varchar(45), 
    grad varchar(45), 
    ulica varchar(45), 
    ulicniBroj int(3) 
) ENGINE = INNODB;

CREATE TABLE voznje( 
voznjaID INT PRIMARY KEY AUTO_INCREMENT, 
pocetnaLokacija VARCHAR(30), 
destinacija VARCHAR(30), 
datum DATE, 
vremepocetka INT, 
trajanje int,
taksistaID INT,
tarifaID INT,
FOREIGN KEY(taksistaID) REFERENCES taksisti(taksistaID) 
ON UPDATE CASCADE ON DELETE NO ACTION,
FOREIGN KEY(tarifaID) REFERENCES tarife(tarifaID) 
ON UPDATE CASCADE ON DELETE NO ACTION 
) ENGINE = INNODB


########################


create database bazanj;

CREATE TABLE EMP (
        EMPNO int NOT NULL,
        ENAME VARCHAR(10),
        JOB VARCHAR(9),
        MGR int, 
        SAL int,
        COMM int,
        DEPTNO int
        );

INSERT INTO EMP VALUES
        (7369, 'SMITH',  'CLERK',     7902, 800, NULL, 20);
INSERT INTO EMP VALUES
        (7499, 'ALLEN',  'SALESMAN',  7698,1600,  300, 30);
INSERT INTO EMP VALUES
        (7521, 'WARD',   'SALESMAN',  7698, 1250,  500, 30);
INSERT INTO EMP VALUES
        (7566, 'JONES',  'MANAGER',   7839,2975, NULL, 20);
INSERT INTO EMP VALUES
        (7654, 'MARTIN', 'SALESMAN',  7698, 1250, 1400, 30);
INSERT INTO EMP VALUES
        (7698, 'BLAKE',  'MANAGER',   7839, 2850, NULL, 30);
INSERT INTO EMP VALUES
        (7782, 'CLARK',  'MANAGER',   7839, 2450, NULL, 10);
INSERT INTO EMP VALUES
        (7788, 'SCOTT',  'ANALYST',   7566, 3000, NULL, 20);
INSERT INTO EMP VALUES
        (7839, 'KING',   'PRESIDENT', NULL,5000, NULL, 10);
INSERT INTO EMP VALUES
        (7844, 'TURNER', 'SALESMAN',  7698, 1500,    0, 30);
INSERT INTO EMP VALUES
        (7876, 'ADAMS',  'CLERK',     7788,1100, NULL, 20);
INSERT INTO EMP VALUES
        (7900, 'JAMES',  'CLERK',     7698, 950, NULL, 30);
INSERT INTO EMP VALUES
        (7902, 'FORD',   'ANALYST',   7566, 3000, NULL, 20);
INSERT INTO EMP VALUES
        (7934, 'MILLER', 'CLERK',     7782, 1300, NULL, 10);



CREATE TABLE DEPT(
        DEPTNO integer,
        DNAME VARCHAR(14),
        LOC VARCHAR(13)
 );

INSERT INTO DEPT VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO DEPT VALUES (20, 'RESEARCH',   'DALLAS');
INSERT INTO DEPT VALUES (30, 'SALES',      'CHICAGO');
INSERT INTO DEPT VALUES (40, 'OPERATIONS', 'BOSTON');


# 1.Importovati priloženu bazu sa podacima.
 
# 2.Prikazati sve redove iz tabele emp koji ispinjavaju uslov da je deptno = 10.

SELECT * FROM emp
WHERE deptno = 10;

# 3.Prikazati sve zaposlene iz odeljenja čija je šifra 10, zajedno sa svim zaposlenima kojirade za proviziju i svim zaposlenima u odeljenju 20 čija je plata jednaka 2000 dolara ili manjaod toga. 

SELECT * FROM `emp` 
WHERE deptno = 10 OR comm >0 OR deptno=20 AND sal<=2000

# 4.Napisati upit koji daje sledeće rezultate:
CLARK WORKS AS A MANAGER.
KING WORKS AS A PRESIDENT
MILLER WORKS AS A CLERK
deptno ovih radnika je 10.

SELECT CONCAT(ename, " WORKS AS A ", job) AS UPIT from EMP
WHERE deptno = 10

# 5.Napisati  upit  u  kome  se  ako  je  plata  zaposlenog  2000  dolara  ili  manje  od  toga,pojavljuje  reč ‘UNDERPAID’, a ako je plata zaposlenog 4000 ili više, pojavljuje se reč„OVERPAID“, a ako je plata između navedenoh granica, pojavljuje se reč „OK“.

SELECT ENAME, SAL<=2000 AS UNDERPAID, SAL>=4000 AS OVERPAID, SAL>2000 AND SAL<4000 AS OK FROM emp

SELECT ENAME, SAL, CASE WHEN SAL <= 2000 THEN "UNDERPAID" WHEN SAL >= 4000 THEN "OVERPAID" ELSE "OK" END AS value FROM EMP;

# 6.Prikazati 5 radnika.

SELECT * FROM emp LIMIT 5;

# 7.Prikazati ime i posao 5 nasumično izabranih radnika. 

SELECT ENAME, JOB FROM emp 
ORDER BY RAND()
LIMIT 5;

# 8.Prikazati sve redove koji u koloni  comm.  sadrže vrednosti NULL.

SELECT * FROM emp
WHERE COMM is NULL

# 9.Od zaposlenih koji rade u odeljenjima 10 i 20, želite da učitate samo one čija imenasadrže slovo “I” ili one čiji se naziv radnog mesta završava na “ER”. 

SELECT * FROM emp
WHERE DEPTNO IN('10', '20') 
HAVING ENAME LIKE'%I%' OR JOB LIKE'%ER' 

# 10.Prikazati ime, radno mesto i iznos plate za zaposlene u odeljenju 10, redosledom kojizavisi od iznosa plate( od najnižeg ka najvišem).

SELECT ENAME, JOB, SAL FROM EMP  
WHERE DEPTNO = 10
ORDER BY SAL

# 11.Sortirati  redove tabele  EMP  prvo  po  rastućem  redosledu  sadržaja  kolone DEPTNO,  azatim  i  po opadajućem redosledu iznosa plata.

SELECT * FROM emp
ORDER by DEPTNO, SAL DESC

# 12.Sortirati i prikazati podatke na sledeći način: Ako kolona JOB sadrži vrednosti“SALESMAN”, želite da sortirate po koloni COMM; u suprotnom, sortiraćete po koloni SAL. 

# 13. Izračunati prosek plata svih zaposlenih.

SELECT AVG(SAL) FROM EMP

# 14.Izračunati prosečnu platu u svakom odeljenju.

SELECT deptno as DEPARTMENT, AVG(SAL) AS AVERAGE_SALARY FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO

# 15.Prikazati najmanju i najveću platu  među svim zaposlenima. 

SELECT MIN(SAL) as NAJMANJA, MAX(SAL) as NAJVECA FROM EMP


#####################################




DROP TABLE IF EXISTS `radnici`;
CREATE TABLE IF NOT EXISTS `radnici` (
  `radnik_id` int(10) NOT NULL AUTO_INCREMENT,
  `ime` varchar(55) NOT NULL,
  `prezime` varchar(55) NOT NULL,
  `datumrodj` date DEFAULT NULL,
  `pol` varchar(1) DEFAULT NULL,
  `plata` int(10) DEFAULT NULL,
  `sektor_id` int(10) DEFAULT NULL,
  PRIMARY KEY (`radnik_id`),
  KEY `sektor_id` (`sektor_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=latin1;


INSERT INTO `radnici` (`radnik_id`, `ime`, `prezime`, `datumrodj`, `pol`, `plata`, `sektor_id`) VALUES
(1, 'Pera', 'Peric', '2000-01-01', 'M', 45000, 1),
(2, 'Zika', 'Zikic', '2001-01-01', 'M', 55000, 2),
(4, 'Mika', 'Mikic', '1990-01-01', 'M', 75000, 4),
(5, 'Milan', 'Petrovic', '1985-01-01', 'M', 85000, 5),
(6, 'Ivana', 'Ivanovic', '1986-02-02', 'Z', 46000, 1),
(7, 'Ana', 'Anic', '1987-06-06', 'Z', 56000, 2),
(8, 'Nina', 'Ninic', '1987-07-07', 'Z', 66000, 3),
(9, 'Mina', 'Minic', '1988-08-08', 'Z', 77000, 4),
(10, 'Masa', 'Masic', '1989-09-09', 'Z', 88000, 5),
(11, 'Jana', 'Janic', '2000-05-05', 'Z', 100000, 5),
(12, 'Iva', 'Ivic', '2002-05-05', 'Z', 105000, NULL);


DROP TABLE IF EXISTS `sektori`;
CREATE TABLE IF NOT EXISTS `sektori` (
  `sektor_id` int(10) NOT NULL,
  `naziv` varchar(55) NOT NULL,
  PRIMARY KEY (`sektor_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


INSERT INTO `sektori` (`sektor_id`, `naziv`) VALUES
(1, 'Uprava'),
(2, 'Administracija'),
(3, 'Marketing'),
(4, 'Razvoj softvera'),
(5, 'Testiranje'),
(6, 'Prodaja');


ALTER TABLE `radnici`
  ADD CONSTRAINT `radnici_ibfk_1` FOREIGN KEY (`sektor_id`) REFERENCES `sektori` (`sektor_id`) ON DELETE NO ACTION ON UPDATE CASCADE;

# UNUTRASLJI SPOJ - vraca slaganja 2 tabele

# 1. nacin:

SELECT radnici.ime, radnici.prezime, sektori.naziv
FROM radnici INNER JOIN sektori 
ON radnici.sektor_id = sektori.sektor_id;
# ako ne navedemo INNER, join ce svakako uraditi INEER, to je default

# 2. nacin:

SELECT r.ime, r.prezime, s.naziv
FROM radnici AS r INNER JOIN sektori AS s
ON r.sektor_id = s.sektor_id;

# 3. nacin: (samo ako su keyevi isti u te dve tabele, primarni u roditeljskoj i strani u decijoj)

SELECT r.ime, r.prezime, s.naziv AS Sektor
FROM radnici AS r INNER JOIN sektori AS s
USING(sektor_id);


# LEVI SPOLJNI SPOJ

SELECT r.*, s.naziv
FROM radnici AS r LEFT JOIN sektori AS s
ON r.sektor_id = s.sektor_id;


# DESNI SPOLJNI SPOJ

SELECT r.*, s.naziv
FROM radnici AS r RIGHT JOIN sektori AS s
ON r.sektor_id = s.sektor_id;


###################################




DROP TABLE IF EXISTS `dosije`;
CREATE TABLE IF NOT EXISTS `dosije` (
  `indeks` int(11) NOT NULL,
  `ime` varchar(20) NOT NULL,
  `prezime` varchar(25) NOT NULL,
  `datum_upisa` date DEFAULT NULL,
  `datum_rodjenja` date DEFAULT NULL,
  `mesto_rodjenja` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`indeks`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;


INSERT INTO `dosije` (`indeks`, `ime`, `prezime`, `datum_upisa`, `datum_rodjenja`, `mesto_rodjenja`) VALUES
(20140021, 'Milos', 'Peric', '2014-07-06', '1995-01-20', 'Beograd'),
(20140022, 'Marijana', 'Savkovic', '2014-07-05', '1995-03-06', 'Kraljevo'),
(20130023, 'Sanja', 'Terzic', '2013-07-04', '1994-11-09', 'Beograd'),
(20130024, 'Nikola', 'Vukovic', '2013-07-04', '1994-09-17', NULL),
(20140025, 'Marijana', 'Savkovic', '2014-07-06', '1995-02-15', 'Kraljevo'),
(20140026, 'Zorica', 'Miladinovic', '2014-07-06', '1995-10-08', 'Vranje'),
(20130027, 'Milena', 'Stankovic', NULL, NULL, NULL);


DROP TABLE IF EXISTS `ispit`;
CREATE TABLE IF NOT EXISTS `ispit` (
  `indeks` int(11) NOT NULL,
  `id_predmeta` int(11) NOT NULL,
  `godina_roka` smallint(6) NOT NULL,
  `oznaka_roka` char(5) NOT NULL,
  `ocena` smallint(6) NOT NULL,
  `datum_ispita` date DEFAULT NULL,
  `bodovi` smallint(6) DEFAULT NULL,
  PRIMARY KEY (`indeks`,`id_predmeta`,`godina_roka`,`oznaka_roka`),
  KEY `godina_roka` (`godina_roka`,`oznaka_roka`),
  KEY `id_predmeta` (`id_predmeta`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;


INSERT INTO `ispit` (`indeks`, `id_predmeta`, `godina_roka`, `oznaka_roka`, `ocena`, `datum_ispita`, `bodovi`) VALUES
(20130024, 1021, 2015, 'apr', 6, NULL, NULL),
(20140026, 1021, 2015, 'jan', 7, NULL, NULL),
(20140026, 1021, 2015, 'feb', 7, NULL, NULL),
(20140026, 2001, 2015, 'jan', -7, NULL, NULL),
(20140026, 1021, 2015, 'apr', 8, NULL, NULL),
(20130027, 1021, 2015, 'jan', 7, NULL, NULL),
(20130027, 1021, 2015, 'feb', 7, NULL, NULL),
(20130027, 1021, 2015, 'apr', 8, NULL, NULL);


DROP TABLE IF EXISTS `ispitni_rok`;
CREATE TABLE IF NOT EXISTS `ispitni_rok` (
  `godina_roka` smallint(6) NOT NULL,
  `oznaka_roka` varchar(5) NOT NULL,
  `naziv` varchar(15) NOT NULL,
  PRIMARY KEY (`godina_roka`,`oznaka_roka`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;



INSERT INTO `ispitni_rok` (`godina_roka`, `oznaka_roka`, `naziv`) VALUES
(2015, 'jan', 'Januar 2015'),
(2015, 'feb', 'Februar 2015'),
(2015, 'apr', 'April 2015'),
(2015, 'jun', 'Jun 2015'),
(2015, 'sep', 'Septembar 2015'),
(2015, 'okt', 'Oktobar 2015');


DROP TABLE IF EXISTS `predmet`;
CREATE TABLE IF NOT EXISTS `predmet` (
  `id_predmeta` int(11) NOT NULL,
  `sifra` varchar(5) NOT NULL,
  `naziv` varchar(40) NOT NULL,
  `bodovi` smallint(6) NOT NULL,
  PRIMARY KEY (`id_predmeta`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;


INSERT INTO `predmet` (`id_predmeta`, `sifra`, `naziv`, `bodovi`) VALUES
(1001, 'M111', 'Analiza 1', 6),
(1002, 'M112', 'Analiza 2', 6),
(1003, 'M113', 'Analiza 3', 6),
(1021, 'M131', 'Geometrija', 6),
(1101, 'M105', 'Diskretne strukture 1', 6),
(1102, 'M106', 'Diskretne strukture 2', 6),
(2001, 'P101', 'Programiranje 1', 8),
(2002, 'P102', 'Programiranje 2', 8),
(2003, 'P103', 'Objektno orijentisano programiranje', 6),
(2004, 'P104', 'Algoritmi i strukture podataka', 6),
(3001, 'S1', 'Engleski jezik 1', 5),
(3002, 'S2', 'Engleski jezik 2', 5),
(4001, 'R101', 'Uvod u organizaciju racunara', 5),
(4002, 'R102', 'Uvod u Veb i Internet tehnologije', 5);



insert into ispit(indeks, id_predmeta, godina_roka, oznaka_roka, ocena, datum_ispita, bodovi)  values 
(20140021, 1001, 2015, 'jan', 9, '2015-01-20', 81),
(20140022, 1001, 2015, 'jan', 8, '2015-01-20', 75),
(20130023, 1001, 2015, 'jan', 8, '2015-01-20', 76),
(20130024, 1001, 2015, 'jan', 10,'2015-01-20', 100),
(20140025, 1001, 2015, 'jan', 6, '2015-01-20', 55),
(20140026, 1001, 2015, 'jan', 5, '2015-01-20', 25),
(20130027, 1001, 2015, 'jan', 8, '2015-01-20', 76),
 (20130023,1002,2018,'jun',7,2018-06-10,6);


###############################




create table dosije (

       indeks           integer      not null,
       ime              varchar(20)  not null,
       prezime          varchar(25)  not null,
       datum_upisa      date                 ,
       datum_rodjenja   date                 ,
       mesto_rodjenja   varchar(100)         ,
       primary key      (indeks)
);

insert into dosije(indeks,ime,prezime,datum_upisa,datum_rodjenja,mesto_rodjenja) values
(20140021, 'Milos'   , 'Peric'      , '2014-07-06', '1995-01-20', 'Beograd' ),
(20140022, 'Marijana', 'Savkovic'   , '2014-07-05', '1995-03-11', 'Kraljevo'),
(20130023, 'Sanja'   , 'Terzic'     , '2013-07-04', '1994-11-09', 'Beograd' ),
(20130024, 'Nikola'  , 'Vukovic'    , '2013-07-04', '1994-09-17',  null     ),
(20140025, 'Marijana', 'Savkovic'   , '2014-07-06', '1995-02-05', 'Kraljevo'),
(20140026, 'Zorica'  , 'Miladinovic', '2014-07-06', '1995-10-08', 'Vranje'  ),
(20130027, 'Milena'  , 'Stankovic'  , null,  null, null     );


create table predmet (
       id_predmeta     integer      not null,
       sifra           varchar(5)   not null,
       naziv           varchar(40)  not null,
       bodovi          smallint     not null,
       primary key(id_predmeta)
);


insert into predmet values
(1001, 'M111', 'Analiza 1', 6)                          ,
(1002, 'M112', 'Analiza 2', 6)                          ,
(1003, 'M113', 'Analiza 3', 6)                          ,
(1021, 'M131', 'Geometrija', 6)                         ,
(1101, 'M105', 'Diskretne strukture 1', 6)              ,
(1102, 'M106', 'Diskretne strukture 2', 6)              ,
(2001, 'P101', 'Programiranje 1', 8)                    ,
(2002, 'P102', 'Programiranje 2', 8)                    ,
(2003, 'P103', 'Objektno orijentisano programiranje', 6),
(2004, 'P104', 'Algoritmi i strukture podataka', 6)     ,
(3001, 'S1'  , 'Engleski jezik 1', 5)                   ,
(3002, 'S2'  , 'Engleski jezik 2', 5)                   ,
(4001, 'R101', 'Uvod u organizaciju racunara', 5)       ,
(4002, 'R102', 'Uvod u Veb i Internet tehnologije', 5)  ;

create table ispitni_rok (
       godina_roka     smallint     not null,
       oznaka_roka     varchar(5)   not null,
       naziv           varchar(15)  not null,
       primary key (godina_roka, oznaka_roka)
);

insert into ispitni_rok values
(2015, 'jan', 'Januar 2015')   ,
(2015, 'feb', 'Februar 2015')  ,
(2015, 'apr', 'April 2015')    ,
(2015, 'jun', 'Jun 2015')      ,
(2015, 'sep', 'Septembar 2015'),
(2015, 'okt', 'Oktobar 2015')  ;

create table ispit (
       indeks          integer      not null                        ,
       id_predmeta     integer      not null                        ,
       godina_roka     smallint     not null                        ,
       oznaka_roka     char(5)      not null                        ,
       ocena           smallint     not null default 5         ,
       datum_ispita    date                                         ,
       bodovi          smallint                                     ,
       primary key (indeks, id_predmeta, godina_roka, oznaka_roka)  
       );

insert into ispit(indeks, id_predmeta, godina_roka, oznaka_roka, ocena, datum_ispita, bodovi)  values 
(20140021, 1001, 2015, 'jan', 9, '2015-01-20', 81),
(20140022, 1001, 2015, 'jan', 8, '2015-01-20', 75),
(20130023, 1001, 2015, 'jan', 8, '2015-01-20', 76),
(20130024, 1001, 2015, 'jan', 10,'2015-01-20', 100),
(20140025, 1001, 2015, 'jan', 6, '2015-01-20', 55),
(20140026, 1001, 2015, 'jan', 5, '2015-01-20', 25),
(20130027, 1001, 2015, 'jan', 8, '2015-01-20', 76),
 (20130023,1002,2018,'jun',7,2018-06-10,6);


####################################################################################################################


# Zadatak 1. Izdvojiti identifikatore predmeta koji imaju više od 5 bodova ili ih je položio neki student 20.01.2015.
# za union treba da bude isti broj kolona i istog tipa

SELECT id_predmeta FROM predmet 
WHERE bodovi>5
UNION
SELECT id_predmeta FROM ispit 
WHERE datum_ispita = '2015-01-20' AND ocena > 5

# Zadatak 2: Izdvojiti indekse studenata koji su rodeni u Beogradu ili imaju ocenu 10. Rezultat urediti u opadajućem poretku.

SELECT indeks FROM dosije
WHERE mesto_rodjenja = 'Beograd'
UNION
SELECT indeks FROM ispit
WHERE ocena =10
ORDER by indeks DESC;

# Pronaci nazive predmeta koji imaju manje bodova od predmeta sa nazivom Geometrija

SELECT predmet.naziv, predmet.bodovi FROM predmet
WHERE predmet.bodovi < 
( SELECT bodovi FROM predmet
 WHERE naziv = 'geometrija'
)

# Izdvojiti nazive predmeta koje je polagao student sa indeksom 20140026

SELECT naziv FROM predmet
WHERE id_predmeta IN(
SELECT id_predmeta FROM ispit
    WHERE indeks = 20140026
)

# Izdvojiti indekse studenata koji su polozili bar jedan predmet koji nije prolozio student sa indeksom 20140022

SELECT indeks FROM ispit
WHERE ocena > 5 AND id_predmeta NOT IN(
SELECT id_predmeta FROM ispit
    WHERE ocena > 5 AND indeks=20140022
)

# Izdvojiti identifikatore predmeta koji imaju vise od 5 bodova i nije ih polozio neki student 20.01.2015

SELECT id_predmeta FROM predmet 
WHERE bodovi > 5 AND id_predmeta NOT IN 
(select id_predmeta from ispit 
where ocena>5 and datum_ispita='2015-01-20')

# Izdvojiti indekse studenata koji su rodjeni u Beogradu i imaju ocenu 8. Rezultat urediti u opadajucem poretku.

SELECT indeks FROM dosije
WHERE mesto_rodjenja = 'beograd' AND indeks IN(
    SELECT indeks FROM ispit
    WHERE ocena = 8
ORDER BY indeks DESC
)

# Kreirati VIEW koji sadrzi šifre i nazive predmeta koji imaju izmedu 8 i 15 bodova

CREATE VIEW v1 AS
SELECT predmet.sifra, predmet.naziv FROM predmet
WHERE bodovi BETWEEN 8 AND 15

# Kreirati VIEW koji sadrzi podatke o ispitima na kojima student ima 81, 76 ili 59 bodova.

CREATE VIEW v2 AS
SELECT * FROM ispit
WHERE bodovi IN(81,76, 59)

# Kreirati View koji sadrzi nazive predmeta koji imaju po 6 bodova i koje je polagao student sa indeksom 20140021.

CREATE VIEW v3 AS
Select predmet.naziv, predmet.bodovi, ispit.indeks FROM predmet INNER JOIN ispit ON predmet.id_predmeta = ispit.id_predmeta Where predmet.bodovi = 6 and ispit.indeks = 20140021

# Kreirati View koji sadrzi naziv ispitnog roka koji je održan izmedu 2010. i 2015. godine i koji u oznaci sadrži slovo p. Rezultat urediti prema nazivu u opadajucem poretku.

CREATE VIEW v4 AS SELECT naziv FROM ispitni_rok WHERE godina_roka BETWEEN 2010 AND 2015 AND oznaka_ispita LIKE ("%p%") ORDER BY naziv DESC

#  Kreitati  VIEW  koji  sadrzi  ime,  prezime  i  datum  rodenja  studenata  koji  su  rodeni  izmedu 4.2.1995. i 10.10.1995. i urediti rezultat prema prezimenu studenta.

CREATE VIEW v5 AS
SELECT dosije.ime, dosije.prezime, dosije.datum_rodjenja FROM dosije
WHERE dosije.datum_rodjenja BETWEEN'1995-01-04' AND '1995-10-10' 
ORDER BY prezime

#################### IF IF IF IF IF IF IF ############################## IF(uslov, tacan, netacan)

SELECT IF(ocena = 5, 'Pao', 'Polozio') AS Status FROM ispit

########################### CASE CASE CASE CASE CASE CASE ########################

SELECT CASE ocena WHEN 5 THEN 'Nije polozen ispit' ELSE 'Polozen ispit' END AS STATUS FROM ispit ;

################################ GREATEST ################################# vraca najvecu vrednost iz spiska

SELECT GREATEST(235, 1209, 79);

################################ LESAT ################################## najmanju sestru

# Funkcija LEAST( ) vraća najmanju vrednost iz spiska. 
SELECT LEAST(kol1, kol2) FROM tabela; 
#Ili: 
SELECT LEAST(234, 2109, 79);

######## 

# Klasifikovati predmete prema broju bodova na sledeci nacin:
-ako predmet ima više od 7 bodova tada pripada I kategoriji
-ako je broj bodova predmeta u intervalu [5,7] tada pripada II kategoriji
-inace predmet pripada III kategoriji.
-Izdvojiti naziv predmeta i kategoriju.

SELECT naziv, CASE WHEN bodovi > 7 THEN 'Kategorija I' when bodovi >= 5 and bodovi <= 7 THEN 'Kat 2' ELSE 'kategorija 3 ' END AS Kategorija FROM predmet